import { useState } from 'react'
import CasinoSymbolsEditor from './CasinoSymbolsEditor'

function AdminPanel({ users, currentUserId, giveCoins, deleteUser, items, deleteItem, addItem }) {
  const API_URL = import.meta.env.VITE_API_URL;
  const [newUser, setNewUser] = useState({
    login: '',
    name: '',
    password: '',
    is_admin: false,
    role: '–•–æ–ª–æ–¥–Ω–∏–∫'
  })

  const handleUserCreate = async (e) => {
    e.preventDefault()
    const res = await fetch(`${API_URL}/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
      body: JSON.stringify(newUser),
    })
    if (res.ok) {
      setNewUser({ login: '', name: '', password: '', is_admin: false, role: '–•–æ–ª–æ–¥–Ω–∏–∫' })
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω')
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏')
    }
  }

  return (
    <div className="fade-in space-y-8 max-w-5xl mx-auto">
      <h2 className="text-2xl font-bold text-purple-400 text-center">üõ† –ê–¥–º–∏–Ω–∫–∞</h2>

      <div className="overflow-x-auto">
        <h3 className="text-xl font-bold mb-2 text-purple-300">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
        <table className="w-full text-left min-w-[600px]">
          <thead>
            <tr className="text-purple-500">
              <th>ID</th>
              <th>–ò–º—è</th>
              <th>–ë–∞–ª–∞–Ω—Å</th>
              <th>–†–æ–ª—å</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {users.map((u) => (
              <tr key={u.id} className="border-b border-zinc-700">
                <td>{u.id}</td>
                <td>{u.name}</td>
                <td>{u.balance}</td>
                <td>{u.role}</td>
                <td className="flex gap-2">
                  <button onClick={() => giveCoins(u.id)} className="btn btn-secondary btn-sm">
                    +100
                  </button>
                  {u.id !== currentUserId && (
                    <button onClick={() => deleteUser(u.id)} className="btn btn-danger btn-sm">
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="bg-zinc-800 p-4 rounded-xl border border-zinc-600 max-w-2xl mx-auto">
        <h3 className="text-xl font-bold mb-2 text-purple-300">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
        <form onSubmit={handleUserCreate} className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <input
            placeholder="–õ–æ–≥–∏–Ω"
            value={newUser.login}
            onChange={(e) => setNewUser({ ...newUser, login: e.target.value })}
            className="input"
          />
          <input
            placeholder="–ò–º—è"
            value={newUser.name}
            onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
            className="input"
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={newUser.password}
            onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
            className="input"
          />
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={newUser.is_admin}
              onChange={(e) => setNewUser({ ...newUser, is_admin: e.target.checked })}
            />
            –ê–¥–º–∏–Ω
          </label>

          <select
            value={newUser.role}
            onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
            className="input col-span-full"
          >
            <option value="–•–æ–ª–æ–¥–Ω–∏–∫">–•–æ–ª–æ–¥–Ω–∏–∫</option>
            <option value="–ì–æ—Å">–ì–æ—Å</option>
            <option value="–ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π">–ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π</option>
          </select>

          <button type="submit" className="btn btn-primary col-span-full">–î–æ–±–∞–≤–∏—Ç—å</button>
        </form>
      </div>

      <div className="max-w-2xl mx-auto">
        <h3 className="text-xl font-bold mb-2 text-purple-300">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
        <AddItemForm onAdd={addItem} />
      </div>

      <div className="overflow-x-auto">
        <h3 className="text-xl font-bold mb-2 text-purple-300">–¢–æ–≤–∞—Ä—ã</h3>
        <table className="w-full text-left min-w-[500px]">
          <thead>
            <tr className="text-purple-500">
              <th>ID</th>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>–¶–µ–Ω–∞</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {items.map((item) => (
              <tr key={item.id} className="border-b border-zinc-700">
                <td>{item.id}</td>
                <td>{item.name}</td>
                <td>{item.price}</td>
                <td>
                  <button onClick={() => deleteItem(item.id)} className="btn btn-danger btn-sm">
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <CasinoSymbolsEditor />
    </div>
  )
}

function AddItemForm({ onAdd }) {
  const handleSubmit = (e) => {
    e.preventDefault()
    const f = e.target
    const item = {
      name: f.name.value,
      price: parseInt(f.price.value),
      description: f.description.value,
      image_url: f.image_url.value,
    }
    onAdd(item)
    f.reset()
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-2">
      <input name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" className="input w-full" />
      <input name="price" type="number" placeholder="–¶–µ–Ω–∞" className="input w-full" />
      <input name="image_url" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" className="input w-full" />
      <textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" className="input w-full" />
      <button type="submit" className="btn btn-primary w-full">–î–æ–±–∞–≤–∏—Ç—å</button>
    </form>
  )
}

export default AdminPanel
